
generator client {
  provider = "prisma-client-js"
   //output   = "../lib/generated/prisma"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum PhoneModel{
  iphonex
  iphone11
  iphone12
  iphone13
  iphone14
  iphone15
}

enum CaseMaterial{
  silicone
  polycarbonate
}

enum CaseFinish {
  smooth
  textured
}

enum CaseColor{
  black
  blue
  rose
  yellow

}

enum TshirtSize{
  small
  medium
  large
  xlarge
}

enum TshirtColor {
  white
  black
  red
  blue
  green
}

enum MugColor{
  white
  black
  red
  blue
  green
}

enum ProductType {
  phoneCase
  tshirt
  mug 
}

model Configuration {
  id                   String       @id @default(auto()) @map("_id") @db.ObjectId
  type                 ProductType?

  imageUrl             String
  width                Int
  height               Int

  // Yeni eklenen alanlar
  croppedImageUrl      String?      // Kırpılmış resmin URL'i
  imagePositionX       Int?         // Kırpılmış resmin X konumu
  imagePositionY       Int?         // Kırpılmış resmin Y konumu
  imageDimensionWidth  Int?         // Kırpılmış resmin genişliği
  imageDimensionHeight Int?         // Kırpılmış resmin yüksekliği

  caseColor            CaseColor?
  caseModel            PhoneModel?
  caseMaterial         CaseMaterial?
  caseFinish           CaseFinish?
  size                 TshirtSize?
  tshirtcolor          TshirtColor?
  mugColor             MugColor?
  basePrice            Float?
  totalPrice           Float?
  Order                 Order[]

  createdAt            DateTime     @default(now())
  updatedAt            DateTime     @updatedAt
}



enum OrderStatus{
  waiting
  in_cargo
  delivered
}

model Order {
  id              String        @id @default(auto()) @map("_id") @db.ObjectId
  configurationId String        @db.ObjectId
  configuration   Configuration @relation(fields: [configurationId], references: [id], onDelete: Cascade)
  userId          String        
  amount          Float
  isPaid          Boolean       @default(false)
  paidType        String
  status          OrderStatus   @default(waiting)
  addressId       String        @db.ObjectId
  address         Address       @relation(fields: [addressId], references: [id])
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  @@index([configurationId])
  @@index([addressId])
}



model Address{
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  street        String
  city          String
  postalCode    String
  country       String
  state         String
  phoneNumber   String
  orders        Order[]
}